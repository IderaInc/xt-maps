/*!
 * @license FusionCharts JavaScript Library
 * Copyright FusionCharts Technologies LLP
 * License Information at <http://www.fusioncharts.com/license>
 *
 * @author FusionCharts Technologies LLP
 * @version fusioncharts/3.2.3-sr2.7260
 * @id fusionmaps.Tocantin.18.07-10-2012 06:48:51
 */

/*jslint browser: true, windows: false, continue: true, forin: true,
         plusplus: true, regexp: true*/
/*global location, FusionCharts*/
FusionCharts(["private", "modules.renderer.highcharts-tocantin", function () {

    var global = this, // access global namespace
        lib = global.hcLib, // access html5 charting library
        api = lib.chartAPI, // access vizualization definition structure
        moduleCmdQueue = lib.moduleCmdQueue,
        injectModule = lib.injectModuleDependency, // access module dependency

        // constants
        M = "M", // SVG MoveTo
        L = "L", // SVG LineTo
        Z = "Z", // SVG ClosePath
        Q = "Q", // SVG Quadratic Beizer
        LFT = "left",
        RGT = "right",
        CEN = "center",
        MID = "middle",
        TOP = "top",
        BTM = "bottom",
        MAPS = "maps", // Name of dependent module

        credits = false && !/fusioncharts\.com$/i.test(location.hostname),
        hasGeoBase = !!api.geo,

        geodefinitions, // store map drawing information
        definition,
        name,
        count;

    geodefinitions = [{
        name: "Tocantin",
        revision: 18,
        creditLabel: credits,
        standaloneInit: true,

        baseWidth: 200,
        baseHeight: 330,
        baseScaleFactor: 10,

        /**
         * @type {Object.<string, Object>}
         */
        entities: {
            "BR.TO": { 
                outlines: [
                    [M,1033,53,L,875,55,Q,850,64,846,67,835,74,835,92,835,105,847,115,872,139,882,151,886,157,903,156,921,155,925,155,940,163,950,161,991,175,1005,189,1022,206,1022,243,1022,255,1018,272,1016,285,1010,302,1010,302,1010,302,1007,311,1004,319,992,351,974,373,964,386,950,446,949,470,947,476,944,487,930,501,930,501,929,501,886,541,888,570,890,576,890,582,889,597,873,614,859,630,841,637,837,639,831,640,816,644,776,651,759,655,732,678,671,706,667,709,641,729,641,773,L,648,862,Q,648,871,646,874,633,889,631,894,630,902,622,914,612,927,610,934,601,959,601,981,601,1007,612,1028,614,1031,617,1035,618,1036,629,1049,638,1059,652,1075,662,1136,641,1195,626,1239,555,1381,558,1436,525,1459,449,1510,412,1543,362,1589,347,1643,344,1654,323,1693,308,1720,311,1752,310,1765,294,1790,273,1823,269,1833,268,1834,266,1870,264,1899,249,1912,153,1996,171,2072,160,2079,150,2094,144,2103,138,2114,114,2157,114,2210,114,2250,122,2275,122,2282,120,2290,116,2312,100,2332,74,2362,65,2405,L,65,2795,Q,69,2816,91,2859,110,2897,111,2930,113,2965,110,3020,112,3057,136,3057,143,3057,187,2990,230,2922,252,2922,271,2922,271,2932,271,2938,268,2948,264,2958,266,2971,269,2984,260,3012,249,3046,249,3067,249,3092,257,3104,265,3117,291,3130,325,3149,334,3153,348,3158,369,3157,436,3155,466,3180,475,3187,487,3207,503,3223,547,3223,583,3223,595,3190,611,3144,647,3121,670,3107,691,3055,709,3010,723,3010,760,3010,783,3044,808,3079,802,3131,795,3189,804,3276,L,804,3276,807,3276,Q,826,3276,858,3249,859,3247,870,3220,876,3203,904,3205,911,3206,963,3176,1016,3145,1044,3145,1059,3145,1060,3153,1060,3159,1059,3180,1064,3203,1092,3217,1113,3228,1139,3249,1151,3260,1178,3260,1198,3260,1218,3255,L,1220,3255,1221,3255,Q,1227,3241,1227,3229,1223,3204,1223,3197,1223,3183,1245,3183,1258,3183,1274,3211,1290,3238,1307,3238,1324,3238,1338,3228,1372,3203,1397,3193,1422,3183,1454,3176,1486,3170,1532,3161,1581,3155,1615,3118,1634,3098,1684,3086,1712,3079,1771,3066,1777,3064,1784,3044,1794,3015,1796,3010,1807,2993,1812,2985,1820,2970,1820,2956,1820,2922,1755,2906,1754,2906,1752,2905,L,1752,2899,Q,1746,2888,1746,2870,1748,2841,1748,2815,1748,2813,1748,2811,1749,2793,1775,2770,1808,2746,1820,2736,1840,2720,1840,2700,1840,2686,1815,2670,1790,2654,1790,2645,1790,2638,1801,2629,1813,2621,1816,2619,1820,2607,1828,2600,1833,2595,1833,2587,1833,2553,1790,2551,1766,2552,1755,2552,1735,2551,1726,2545,1714,2537,1696,2510,1676,2480,1676,2466,1676,2454,1686,2439,1705,2410,1712,2395,1716,2371,1718,2367,1748,2333,1750,2319,1751,2318,1751,2317,1778,2303,1783,2290,1784,2287,1784,2285,1781,2271,1785,2259,1790,2248,1791,2242,1803,2224,1828,2201,1860,2173,1886,2170,1908,2168,1915,2162,1916,2162,1932,2143,1965,2108,1965,2098,1965,2096,1964,2094,1959,2084,1931,2070,1895,2055,1892,2053,1776,1998,1745,1992,1744,1992,1742,1992,1720,1976,1718,1932,1718,1909,1694,1884,1675,1874,1637,1857,1621,1850,1621,1841,1621,1829,1650,1815,1679,1802,1679,1784,1679,1758,1617,1708,1556,1659,1556,1625,1556,1620,1559,1615,1554,1588,1512,1570,1471,1552,1471,1540,1471,1534,1490,1519,1511,1502,1514,1496,1520,1484,1529,1459,1534,1447,1540,1431,1549,1411,1570,1341,1582,1328,1591,1325,1601,1321,1630,1321,1632,1321,1667,1322,1701,1319,1701,1302,1701,1299,1690,1228,1690,1216,1700,1201,1710,1187,1710,1168,1710,1154,1684,1135,1656,1115,1631,1115,1625,1115,1616,1125,1607,1135,1570,1135,1550,1135,1530,1154,1511,1173,1505,1173,1487,1173,1448,1125,1416,1085,1410,1073,1406,1069,1387,1049,1384,1046,1380,1042,L,1346,997,Q,1332,980,1323,963,1305,941,1303,935,1298,923,1298,878,1289,875,1233,859,L,1233,853,Q,1234,845,1245,837,1259,828,1262,822,1269,811,1281,789,1282,787,1283,784,1304,762,1304,735,1303,733,1303,727,1303,720,1310,709,1317,697,1317,682,1317,659,1313,650,1313,644,1316,637,1320,628,1329,617,1333,599,1344,582,1346,580,1347,578,L,1345,401,Q,1339,382,1338,376,1337,369,1337,340,1333,330,1332,319,1331,311,1331,302,1331,301,1331,301,1330,293,1327,272,1326,266,1325,260,1325,247,1332,212,1331,205,1330,189,1328,182,1311,170,1304,163,1292,145,1291,144,1257,138,1243,136,1223,122,1189,102,1186,99,1173,88,1158,72,1148,64,1137,64,1135,64,1088,69,1087,70,1086,70,L,1086,70,Q,1076,69,1068,63,1068,63,1068,62,Q,1050,56,1033,53,Z]
                ], 
                label: "Tocantin", 
                shortLabel: "TO", 
                labelPosition: [101.5,206.5], 
                labelAlignment: [CEN,MID]
            }
        }
    }];

    // Add the definition to map structure.
    count = geodefinitions.length;
    if (hasGeoBase) {
        while (count--) {
            definition = geodefinitions[count];
            api(definition.name.toLowerCase(), definition, api.geo);
        }
    }
    else {
        while (count--) {
            definition = geodefinitions[count];
            name = definition.name.toLowerCase();

            injectModule(MAPS, name, 1); // add maps dependency
            // enqueue definition
            moduleCmdQueue[MAPS].unshift({
                cmd: '_call',
                obj: window,
                args: [function (alias, def) {
                    if (!api.geo) {
                        global.raiseError(global.core, '12052314141', 'run',
                            'JavaScriptRenderer~Maps._call()',
                            new Error('FusionCharts.HC.Maps.js is required in order to define vizualization'));
                        return;
                    }
                    api(alias, def, api.geo);
                }, [name, definition], window]
            });
        }
    }

}]);